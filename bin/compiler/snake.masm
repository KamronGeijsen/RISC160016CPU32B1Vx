	INIT.int	r0,0
	INIT.int	y,0
	INIT.int	x,0
	INIT.int	cx,5
	INIT.int	cy,5
	INIT.byte	len,5
	INIT.nibble	lastkeys,0x0
	INIT.int	keystart,0x6800
	INIT.int	keyend,0x6800
	INIT.nibble	keyset,0
	INIT.couple	taildir,0
	INIT.nibble	keysedge,0
	INIT.couple	horiz,0
	INIT.couple	vert,0
	INIT.int	end,0x400
	INIT.couple	dir,0
	INIT.couple	adjusted,0
	INIT.int	index,0
	INIT.int	base,0x7000
	INIT.byte	collide,0
	INIT.byte	value,0
	INIT.bit	bit0,0
	INIT.bit	bit1,1
	INIT.int	index,0
	INIT.int	end,0x100
	INIT.int	valuestart,0x7000
	INIT.int	bitstart,0x5000
	INIT.bit	enter,0
	INIT.int	keysetbase,0x6000
	INIT.int	r29,0
	INIT.int	r30,0
	
8:	GET	enter,[keysetbase+4]
	Je 2f CMP	enter,0x1
	JMP 8b
2:	GET	enter,[keysetbase+4]
	Je 3f CMP	enter,0x0
	JMP 2b			
3:	LEA	keystart,[0x6800]
	LEA	keyend,[0x6800]
	MOV	y,1
	SET	y,[keystart]
	MOV	y,0
	MOV	x,0
	MOV	cx,5
	MOV	cy,5
	MOV	len,5
	MOV	dir,1
	
9:	GET	keyset,[0x6000]
	GET	taildir,[keyend]
	ANDN	keysedge,keyset,lastkeys
	MOV	lastkeys,keyset
3:	Je 1f CMP	keysedge,0
	Je 2f AND	taildir,0b10
	GET	horiz,[keysetbase+0]
	Je 1f CMP	horiz,0
	AND	keysedge,0xc
	AND	horiz,1
	ADD	keyend,2
	SET	horiz,[keyend]
	ANDN	keyend,end
	JMP 3b
2:	GET	vert,[keysetbase+2]
	Je 1f CMP	vert,0
	AND	keysedge,0x3
	OR	vert,2
	ADD	keyend,2
	SET	vert,[keyend]
	ANDN	keyend,end
	JMP 3b
	
1:	Je 3f CMP	keystart,keyend
	ADD	keystart,2
	GET	dir,[keystart]
	ANDN	keystart,end
3:	LEA	adjusted,[dir+1*dir+0xff]
	Jne 2f AND	dir,0b10
	IADD	x,adjusted,x
	Jge 8b CMP	x,16
	JMP 3f
2:	IADD	y,adjusted,y
	Jge 8b CMP	y,16
3:	LEA	index,[x+16*y]
	GET	collide,[base+8*index]
	Jne 8b CMP	collide,0
	SET	len,[base+8*index]
	
	Jne 1f CMP	x,cx
	Jne 1f CMP	y,cy
	ADD	len,3
4:	RAND	cx,r0,16
	RAND	cy,r0,16
	LEA	index,[cx+16*cy]
	GET	collide,[base+8*index]
	Jne 4b CMP	collide,0
	MOV	index,0
2:	GET	value,[valuestart+8*index]
	Je 3f CMP	value,0
	ADD	value,3
	SET	value,[valuestart+8*index]
3:	ADD	index,1
	Jl 2b CMP	index,end
	
1:	MOV	index,0
4:	GET	value,[valuestart+8*index]
	Je 2f CMP	value,0
	SET	bit1,[bitstart+1*index]
	SUB	value,1
	SET	value,[valuestart+8*index]
	ADD	index,1
	Jl 4b CMP	index,end
	JMP 3f
2:	SET	bit0,[bitstart+1*index]
	ADD	index,1
	Jl 4b CMP	index,end
3:	LEA	index,[cx+16*cy]
	SET	bit1,[bitstart+1*index]
	JAL 1*r0+0x400
	JMP 9b
